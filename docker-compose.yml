services:
  postgres:
    env_file:
      - .env
    image: ${POSTGRES_IMAGE}
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - backend
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    restart: unless-stopped
    ports:
      - "9000:${S3_API_PORT}"
      - "9001:${S3_CONSOLE_PORT}"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - ./minio-data:/data
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:${S3_API_PORT}/minio/health/live || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  core-service:
    image: ${CORE_SERVICE_IMAGE}
    container_name: core_service
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    ports:
      - "${CORE_PORT}:${CORE_PORT}"
    networks:
      - backend
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${CORE_PORT}/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5

networks:
  backend:

volumes:
  pgdata: